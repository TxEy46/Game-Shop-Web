import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { MatCardModule } from '@angular/material/card';
import { MatButtonModule } from '@angular/material/button';
import { HttpClient, HttpClientModule, HttpHeaders } from '@angular/common/http';
import { Subscription, interval } from 'rxjs';
import { Transaction } from '../../model/transaction';
import { Header } from '../header/header';
import { Constants } from '../../config/constants';

@Component({
  selector: 'app-wallet',
  standalone: true,
  imports: [CommonModule, FormsModule, MatCardModule, MatButtonModule, HttpClientModule, Header],
  templateUrl: './wallet.html',
  styleUrls: ['./wallet.scss']
})
export class Wallet implements OnInit, OnDestroy {
  balance: number = 0;
  topUpAmount: number | null = null;
  predefinedAmounts: number[] = [100, 200, 500];
  transactions: Transaction[] = [];
  isLoading: boolean = true;

  private balanceSub?: Subscription;

  constructor(
    private http: HttpClient,
    private constants: Constants
  ) { }

  ngOnInit() {
    this.loadBalance();
    this.loadTransactions();

    // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
    this.balanceSub = interval(3000).subscribe(() => this.loadBalance());
  }

  ngOnDestroy() {
    this.balanceSub?.unsubscribe();
  }

  loadBalance() {
    const token = localStorage.getItem('token');
    if (!token) {
      console.error('No token found');
      this.isLoading = false;
      return;
    }

    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });

    this.http.get<any>(`${this.constants.API_ENDPOINT}/wallet`, {
      headers,
      withCredentials: true
    })
      .subscribe({
        next: (res) => {
          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á balance ‡πÅ‡∏•‡∏∞ wallet_balance
          this.balance = res.balance || res.wallet_balance || 0;
          this.isLoading = false;
          console.log('Balance loaded:', this.balance);
        },
        error: (err) => {
          console.error('Error loading balance:', err);
          this.isLoading = false;
          if (err.status === 401) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
          }
        }
      });
  }

  loadTransactions() {
    const token = localStorage.getItem('token');
    if (!token) {
      console.error('No token found');
      return;
    }

    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`
    });

    this.http.get<any>(`${this.constants.API_ENDPOINT}/transactions`, {
      headers,
      withCredentials: true
    })
      .subscribe({
        next: (res) => {
          console.log('Transactions response:', res);

          // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á response
          let transactionsData: any[] = [];

          if (Array.isArray(res)) {
            transactionsData = res;
          } else if (res.transactions && Array.isArray(res.transactions)) {
            transactionsData = res.transactions;
          }

          // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö Transaction interface
          this.transactions = transactionsData.map(transaction => ({
            id: transaction.id,
            user_id: transaction.user_id,
            user_name: transaction.user_name || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏',
            type: transaction.type || 'unknown',
            amount: transaction.amount ? transaction.amount.toString() : '0',
            description: transaction.description || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢',
            created_at: transaction.created_at || new Date().toISOString()
          }));

          console.log('Processed transactions:', this.transactions);
        },
        error: (err) => {
          console.error('Error loading transactions:', err);
          this.transactions = [];
          if (err.status === 401) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
          }
        }
      });
  }

  selectAmount(amount: number) {
    this.topUpAmount = amount;
  }

  topUp() {
    if (!this.topUpAmount || this.topUpAmount <= 0) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á');
      return;
    }

    // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Ñ‡πà‡∏≤‡∏ï‡∏¥‡∏î‡∏•‡∏ö
    if (this.topUpAmount < 0) {
      alert('‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤‡∏®‡∏π‡∏ô‡∏¢‡πå');
      this.topUpAmount = null;
      return;
    }

    const token = localStorage.getItem('token');
    if (!token) {
      alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô');
      return;
    }

    const headers = new HttpHeaders({
      'Authorization': `Bearer ${token}`,
      'Content-Type': 'application/json'
    });

    this.http.post(
      `${this.constants.API_ENDPOINT}/deposit`,
      { amount: this.topUpAmount },
      { headers, withCredentials: true }
    )
      .subscribe({
        next: (res: any) => {
          console.log('Deposit successful:', res);
          this.topUpAmount = null;
          this.loadBalance();
          this.loadTransactions();

          const newBalance = res.new_balance || res.balance || this.balance;
          alert(`üí∞ ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! \n‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: ${newBalance} ‡∏ö‡∏≤‡∏ó`);

          // üî• ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ: ‡∏ö‡∏≠‡∏Å‡πÉ‡∏´‡πâ header ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
          localStorage.setItem('lastBalanceUpdate', Date.now().toString());
        },
        error: (err) => {
          console.error('Deposit error:', err);
          if (err.status === 400) {
            alert('‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ' + (err.error?.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'));
          } else if (err.status === 401) {
            alert('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà');
          } else if (err.status === 500) {
            alert('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö: ' + (err.error?.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á'));
          } else {
            alert('‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (err.error?.message || '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà'));
          }
        }
      });
  }

  // helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
  getTransactionTypeDisplay(type: string): string {
    const typeMap: { [key: string]: string } = {
      'deposit': '‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô',
      'purchase': '‡∏ã‡∏∑‡πâ‡∏≠‡πÄ‡∏Å‡∏°',
      'refund': '‡∏Ñ‡∏∑‡∏ô‡πÄ‡∏á‡∏¥‡∏ô',
      'withdraw': '‡∏ñ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô'
    };
    return typeMap[type] || type;
  }

  // helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ò‡∏∏‡∏£‡∏Å‡∏£‡∏£‡∏°
  getTransactionColor(type: string): string {
    const colorMap: { [key: string]: string } = {
      'deposit': 'green',
      'purchase': 'red',
      'refund': 'blue',
      'withdraw': 'orange'
    };
    return colorMap[type] || 'gray';
  }
}